import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Button } from '../ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, } from '../ui/select';
import { Skeleton } from '../ui/skeleton';
import { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight, } from 'lucide-react';
export function DataTablePagination({ page, pageSize, pageCount, onPageChange, onPageSizeChange, isLoading, hasNextPage, isFetchingNextPage, onLoadMore, }) {
    const startRow = pageSize * (page - 1) + 1;
    const endRow = Math.min(page * pageSize, pageCount * pageSize);
    const totalRows = pageCount * pageSize;
    return (_jsxs("div", { className: "flex flex-col md:flex-row md:items-center md:justify-between px-2 w-full gap-2", children: [_jsxs("div", { className: "flex items-center space-x-6 lg:space-x-8", children: [_jsxs("div", { className: "flex items-center space-x-2", children: [_jsx("p", { className: "text-sm font-medium", children: "Rows per page" }), _jsxs(Select, { value: String(pageSize), onValueChange: (value) => onPageSizeChange(Number(value)), children: [_jsx(SelectTrigger, { className: "h-8 w-[70px]", children: _jsx(SelectValue, { placeholder: pageSize }) }), _jsx(SelectContent, { side: "top", children: [10, 20, 30, 40, 50].map((size) => (_jsx(SelectItem, { value: String(size), children: size }, size))) })] })] }), _jsx("div", { className: "flex w-[100px] items-center justify-center text-sm font-medium", children: isLoading ? (_jsx(Skeleton, { className: "h-5 w-full" })) : (`Page ${page} of ${pageCount}`) })] }), _jsx("div", { className: "flex items-center text-sm text-muted-foreground", children: isLoading ? (_jsx(Skeleton, { className: "h-5 w-32" })) : (`Showing ${startRow}-${endRow} of ${totalRows} rows`) }), _jsxs("div", { className: "flex items-center space-x-2", children: [_jsxs(Button, { variant: "outline", className: "hidden h-8 w-8 p-0 lg:flex", onClick: () => onPageChange(1), disabled: page === 1, children: [_jsx("span", { className: "sr-only", children: "Go to first page" }), _jsx(ChevronsLeft, {})] }), _jsxs(Button, { variant: "outline", className: "h-8 w-8 p-0", onClick: () => onPageChange(page - 1), disabled: page === 1, children: [_jsx("span", { className: "sr-only", children: "Go to previous page" }), _jsx(ChevronLeft, {})] }), _jsxs(Button, { variant: "outline", className: "h-8 w-8 p-0", onClick: () => onPageChange(page + 1), disabled: !hasNextPage || isFetchingNextPage || page === pageCount, children: [_jsx("span", { className: "sr-only", children: "Go to next page" }), _jsx(ChevronRight, {})] }), _jsxs(Button, { variant: "outline", className: "hidden h-8 w-8 p-0 lg:flex", onClick: () => onPageChange(pageCount), disabled: !hasNextPage || isFetchingNextPage || page === pageCount, children: [_jsx("span", { className: "sr-only", children: "Go to last page" }), _jsx(ChevronsRight, {})] }), onLoadMore && hasNextPage && (_jsx(Button, { variant: "outline", className: "ml-4 px-4", onClick: onLoadMore, disabled: isFetchingNextPage, children: isFetchingNextPage ? (_jsxs("span", { className: "flex items-center", children: [_jsx("div", { className: "mr-2 h-4 w-4 animate-spin rounded-full border-2 border-current border-t-transparent" }), "Loading..."] })) : ('Load More') }))] })] }));
}
